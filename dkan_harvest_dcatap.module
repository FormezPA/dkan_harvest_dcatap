<?php

/**
 * @file
 * The module extends the DKAN Harvester and allow the DCAT-AP API harvesting.
 */

/**
 * Implements hook_harvest_source_types().
 */
function dkan_harvest_dcatap_harvest_source_types() {

  return array(
    'harvest_dcatap' => array(
      'machine_name' => 'harvest_dcatap',
      'label' => 'DCAT-AP - (alpha)',
      'cache callback' => '_dkan_harvest_dcatap_cache',
      'migration class' => 'HarvestMigrationDCATAP',
    ),
  );
}

/**
 * Get the cache from the file DCAT-AP.
 *
 * @param HarvestSource $source The source.
 * @param $harvest_updatetime The last uptime.
 *
 * @return HarvestCache
 */
function _dkan_harvest_dcatap_cache(HarvestSource $source, $harvest_updatetime) {

  // This is needed for remote uri.
  $context = stream_context_create(
            array(
              'http' => array(
                'timeout' => 600000,
              ),
              'https' => array(
                'timeout' => 600000,
              ),
            )
    );

  $remote = @file_get_contents($source->uri, 0, $context);

  if ($remote) {
    $data = drupal_json_decode($remote);

    // Filter and save the data gathered from the endpoint.
    if ($data) {
      $v = _dkan_harvest_dcatap_cache_json($data, $source, $harvest_updatetime);
      return $v;
    }
  }
}

/**
 * Cache the dcat.json datasets.
 *
 * @param array $data
 * @param HarvestSource $source
 * @param $harvest_updatetime
 *
 * @return HarvestCache
 */
function _dkan_harvest_dcatap_cache_json(array $data, HarvestSource $source, $harvest_updatetime) {

  $harvest_cache = new HarvestCache($source, $harvest_updatetime);

  $datasets = $data['dataset'];

  // Filter datasets, only allow datasets that have the filters value.
  $filters = $source->filters;
  if (!empty($filters)) {
    $datasets = array_filter($datasets, function ($dataset) use ($filters, &$harvest_cache) {
      $dataset_key = _dkan_harvest_dcatap_prepare_item_id($dataset['identifier']);
      // Default action is to DROP the dataset if it does not meet the
      // filtering criteria.
      $accept = FALSE;
      foreach ($filters as $path => $filter_value) {
        $value = dkan_harvest_datajson_get_value($dataset, $path);
        if (!empty($value) && !empty($filter_value) && count(array_intersect((array) $filter_value, (array) $value)) > 0) {
          // The value to filter is an array and does intersect with the
          // dataset value. ACCEPT.
          $accept = TRUE;
        }
        if ($accept) {
          // Dataset have at least one filter that match. No need for more
          // proccecing.
          break;
        }
      }

      if ($accept) {
        // Update the cache result object.
        $harvest_cache->setCacheEntryFiltered($dataset_key, $dataset['title']);
      }
      else {
        // This dataset will be dropped from here on.
        // Add to the processed count.
        $harvest_cache->setCacheEntryProcessed($dataset_key, $dataset['title']);
      }
      // Drop the dataset if excluded.
      return $accept;
    });
  }

  // Exclude datasets, drop datasets that have the excludes value.
  $excludes = $source->excludes;
  if (!empty($excludes)) {
    $datasets = array_filter($datasets, function ($dataset) use ($excludes, &$harvest_cache) {
      $dataset_key = _dkan_harvest_dcatap_prepare_item_id($dataset['identifier']);
      // Default action is to accept dataset that does not meet the
      // excluding criteria.
      $accept = TRUE;
      foreach ($excludes as $path => $exclude_value) {
        $value = dkan_harvest_datajson_get_value($dataset, $path);
        if (!empty($value) && count(array_intersect((array) $exclude_value, (array) $value)) > 0) {
          // The value to exclude is an array and does intersect
          // with the dataset value then drop it.
          $accept = FALSE;
        }

        if (!$accept) {
          // Dataset have at least one exclude criterion that matchs.
          // No need for more proccecing.
          break;
        }
      }

      if (!$accept) {
        // Update the cache result object.
        // This dataset will be dropped from here on.
        // Add to the processed count.
        $harvest_cache->setCacheEntryExcluded($dataset_key, $dataset['title']);
      }

      // Drop the dataset if excluded.
      return $accept;
    });
  }

  // Override field values.
  $overrides = $source->overrides;
  $datasets = array_map(function ($dataset) use ($overrides, &$harvest_cache) {
    foreach ($overrides as $path => $override_value) {
      dkan_harvest_datajson_set_value($dataset, $path, $override_value[0], TRUE);
    }
    return $dataset;
  }, $datasets);

  // Set default values for empty fields.
  $defaults = $source->defaults;
  $datasets = array_map(function ($dataset) use ($defaults, &$harvest_cache) {
    foreach ($defaults as $path => $default_value) {
      dkan_harvest_datajson_set_value($dataset, $path, $default_value[0]);
    }
    return $dataset;
  }, $datasets);

  // TODO add defaults and overriddes?
  foreach ($datasets as $dataset) {
    $identifier = _dkan_harvest_dcatap_prepare_item_id($dataset['identifier']);
    $dataset_file = implode('/', array($source->getCacheDir(), $identifier));
    $data = drupal_json_encode($dataset);
    $cached = @file_put_contents($dataset_file, $data);

    if (!$cached) {
      $harvest_cache->setCacheEntryFailed($identifier, $dataset['title']);
    }
    else {
      // This will reset the failed flag if previously set.
      $harvest_cache->setCacheEntryProcessed($identifier, $dataset['title']);
    }
  }

  return $harvest_cache;
}

/**
 * Removes URL and returns directory from URL string.
 *
 * Example: "http://example.com/whathat" returns "whatwhat"
 */
function _dkan_harvest_dcatap_prepare_item_id($identifier) {
  if (filter_var($identifier, FILTER_VALIDATE_URL)) {
    $identifier = parse_url($identifier, PHP_URL_PATH);
    $frag = explode('/', $identifier);
    // Does not produce "Strict warning: Only variables should be passed by
    // reference" like end(explode('/', $identifier));.
    $identifier = $frag[count($frag) - 1];
  }
  return $identifier;
}
